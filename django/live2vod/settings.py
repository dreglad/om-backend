"""
Django settings for live2vod project.

Generated by 'django-admin startproject' using Django 2.0rc1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import os

from celery.schedules import crontab, schedule

DEBUG = os.environ.get('DEBUG', False)

# App settings
HLS_USE_MPEGTS = bool(os.environ.get('HLS_USE_MPEGTS'))
MEDIA_DISPOSE_THRESHOLD = float(os.environ.get('MEDIA_DISPOSE_THRESHOLD', 0))

ALLOWED_HOSTS = ['*']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=b)=e41e+e^@=@72e3nm(e50%q#&eb775_+sl%mvb#gsb+m+9('

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    # 'debug_toolbar',
    'django_admin_json_editor',
    # 'django_celery_beat',
    'django_celery_results',
    'django_filters',
    'graphene_django',
    'rest_framework_filters',
    'cacheback',
    'corsheaders',
    'rest_framework',
    'guardian',

    'dvr',
]

GRAPHENE = {
    'SCHEMA': 'dvr.schema'
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INTERNAL_IPS = ['127.0.0.1']
SHOW_TOOLBAR_CALLBACK = 'dvr.show'

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAdminUser',
    # ],
    # 'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': (
        # 'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework_filters.backends.RestFrameworkFilterBackend',
    ),
}

CELERY_BROKER_URL = 'amqp://user:pass@rabbitmq//'
CELERYD_TASK_SOFT_TIME_LIMIT = 60 * 30
CELERY_RESULT_BACKEND = 'django_celery_results.backends.cache.CacheBackend'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Mexico_City'
CELERY_TRACK_STARTED = True
CELERY_CREATE_MISSING_QUEUES = True
CELERY_DEFAULT_QUEUE = 'celery'
CELERY_BEAT_SCHEDULE = {
    # 'autocreate-scene-analysis': {
    #     'task': 'dvr.tasks.scenes.autocreate_scene_analysis',
    #     'schedule': schedule(run_every=60.0)
    # },
    # 'dispatch-conversions': {
    #     'task': 'dvr.tasks.dispatch_conversions',
    #     'schedule': schedule(run_every=5.0)
    # },
    'dispatch-videos': {
        'task': 'dvr.tasks.dispatch_videos',
        'schedule': schedule(run_every=5.0)
    }
}

if MEDIA_DISPOSE_THRESHOLD:
    CELERY_BEAT_SCHEDULE.update({
        'dispatch-videos': {
            'task': 'dvr.tasks.dispatch_media_dispose',
            'schedule': schedule(run_every=300.0)
        }
    })

CELERY_IMPORTS = ('dvr.tasks',)


ROOT_URLCONF = 'live2vod.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'live2vod.wsgi.application'

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'HOST': 'db',
        'PORT': 5432,
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'cache:11211',
    },
    'stream_providers': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'cache:11211',
        'KEY_PREFIX': 'sp'
    }
}

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # this is default
    'guardian.backends.ObjectPermissionBackend',
)

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/srv/static'

MEDIA_URL = '/'
MEDIA_ROOT = '/srv/media'


if os.environ.get('SENTRY_DSN'):
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    sentry_sdk.init(
        dsn=os.environ.get('SENTRY_DSN'),
        integrations=[DjangoIntegration()]
    )

import logging.config
LOGGING_CONFIG = None
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
    # root logger
        '': {
            'level': 'WARNING',
            'handlers': ['console'],
        },
    },
})

try:
    from .local_settings import *
except ImportError:
    pass
